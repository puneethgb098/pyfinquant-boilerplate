name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  UV_VERSION: "0.6.5"
  PYTHONPATH: "src"
  PYTHONUNBUFFERED: 1
  UV_CACHE_DIR: /tmp/.uv-cache

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Read Python version from pyproject.toml
      id: python-version
      run: |
        echo "version=$(grep '^requires-python = ' pyproject.toml | cut -d'"' -f2 | cut -d'>=' -f2)" >> $GITHUB_OUTPUT
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: '**/pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests
      run: |
        pytest --cov=pyfinquant tests/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      checks: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Read Python version from pyproject.toml
      id: python-version
      run: |
        echo "version=$(grep '^requires-python = ' pyproject.toml | cut -d'"' -f2 | cut -d'>=' -f2)" >> $GITHUB_OUTPUT
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python-version.outputs.version }}
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install build dependencies
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv pip install build twine
    
    - name: Build and verify package
      run: |
        source .venv/bin/activate
        ruff check .
        mypy .
        python -m build
        twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  deploy:
    name: Deploy to PyPI
    needs: build
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      checks: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download built package
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
    
    - name: Read Python version from pyproject.toml
      id: python-version
      run: |
        echo "version=$(grep '^requires-python = ' pyproject.toml | cut -d'"' -f2 | cut -d'>=' -f2)" >> $GITHUB_OUTPUT
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.python-version.outputs.version }}
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        uv venv .venv
        source .venv/bin/activate
        uv pip install twine
        twine upload dist/* --verbose
